import './Feeds.svelte.css.proxy.js';
/* src/components/Feeds.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Feed from "./Feed.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

// (3:2) {#each feeds as feed, i}
function create_each_block(ctx) {
	let feed;
	let current;

	feed = new Feed({
			props: {
				feed: /*feed*/ ctx[1],
				index: /*i*/ ctx[3]
			}
		});

	return {
		c() {
			create_component(feed.$$.fragment);
		},
		m(target, anchor) {
			mount_component(feed, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const feed_changes = {};
			if (dirty & /*feeds*/ 1) feed_changes.feed = /*feed*/ ctx[1];
			feed.$set(feed_changes);
		},
		i(local) {
			if (current) return;
			transition_in(feed.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(feed.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(feed, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h2;
	let t1;
	let current;
	let each_value = /*feeds*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");
			h2 = element("h2");
			h2.textContent = "Posts";
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h2, "v-if", "feeds.length !== 0");
			attr(div, "class", "feeds svelte-1g2bm0g");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*feeds*/ 1) {
				each_value = /*feeds*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { feeds } = $$props;

	$$self.$$set = $$props => {
		if ("feeds" in $$props) $$invalidate(0, feeds = $$props.feeds);
	};

	return [feeds];
}

class Feeds extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { feeds: 0 });
	}
}

export default Feeds;